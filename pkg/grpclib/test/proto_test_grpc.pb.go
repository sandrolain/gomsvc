// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pkg/grpclib/test/proto_test.proto

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UnitTestService_RunTest_FullMethodName = "/prototest.UnitTestService/RunTest"
)

// UnitTestServiceClient is the client API for UnitTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnitTestServiceClient interface {
	RunTest(ctx context.Context, in *UnitTestRequest, opts ...grpc.CallOption) (*UnitTestResponse, error)
}

type unitTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnitTestServiceClient(cc grpc.ClientConnInterface) UnitTestServiceClient {
	return &unitTestServiceClient{cc}
}

func (c *unitTestServiceClient) RunTest(ctx context.Context, in *UnitTestRequest, opts ...grpc.CallOption) (*UnitTestResponse, error) {
	out := new(UnitTestResponse)
	err := c.cc.Invoke(ctx, UnitTestService_RunTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnitTestServiceServer is the server API for UnitTestService service.
// All implementations must embed UnimplementedUnitTestServiceServer
// for forward compatibility
type UnitTestServiceServer interface {
	RunTest(context.Context, *UnitTestRequest) (*UnitTestResponse, error)
	mustEmbedUnimplementedUnitTestServiceServer()
}

// UnimplementedUnitTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUnitTestServiceServer struct {
}

func (UnimplementedUnitTestServiceServer) RunTest(context.Context, *UnitTestRequest) (*UnitTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTest not implemented")
}
func (UnimplementedUnitTestServiceServer) mustEmbedUnimplementedUnitTestServiceServer() {}

// UnsafeUnitTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnitTestServiceServer will
// result in compilation errors.
type UnsafeUnitTestServiceServer interface {
	mustEmbedUnimplementedUnitTestServiceServer()
}

func RegisterUnitTestServiceServer(s grpc.ServiceRegistrar, srv UnitTestServiceServer) {
	s.RegisterService(&UnitTestService_ServiceDesc, srv)
}

func _UnitTestService_RunTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitTestServiceServer).RunTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitTestService_RunTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitTestServiceServer).RunTest(ctx, req.(*UnitTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnitTestService_ServiceDesc is the grpc.ServiceDesc for UnitTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnitTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prototest.UnitTestService",
	HandlerType: (*UnitTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTest",
			Handler:    _UnitTestService_RunTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpclib/test/proto_test.proto",
}
